name: PHP 8.4 Tests
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
permissions:
  contents: write
jobs:
  build:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: mde2-msl-test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping --silent"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
    steps:
    - uses: actions/checkout@v4
    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, mysqli, zip
        tools: phpdbg
        coverage: xdebug
    - name: Validate composer.json and composer.lock
      run: composer validate --strict
    - name: Install JS dependencies
      run: |
        npm install
    - name: Install dependencies
      run: |
        composer install --prefer-dist --no-progress --no-suggest
        composer dump-autoload -o
    - name: Wait for MySQL to be ready
      run: |
        for i in {30..0}; do
          if mysqladmin ping -h127.0.0.1 --silent; then
            break
          fi
          echo 'Waiting for MySQL...'
          sleep 5
        done
        if [ "$i" = 0 ]; then
          echo >&2 'MySQL did not start in time.'
          exit 1
        fi
    - name: Grant privileges to test_user
      run: |
        mysql -h127.0.0.1 -uroot -proot_password -e "
          CREATE USER IF NOT EXISTS 'test_user'@'%' IDENTIFIED BY 'test_password';
          GRANT ALL PRIVILEGES ON *.* TO 'test_user'@'%';
          FLUSH PRIVILEGES;
        "
    - name: Set test environment variables
      run: |
        # Override just the database settings for testing
        echo "DB_HOST=127.0.0.1" >> $GITHUB_ENV
        echo "DB_USER=test_user" >> $GITHUB_ENV
        echo "DB_PASSWORD=test_password" >> $GITHUB_ENV
        echo "DB_NAME=mde2-msl-test" >> $GITHUB_ENV
    - name: Initialize database structure and lookup data
      run: php -r "require 'install.php'; createDatabaseStructure(\$connection); insertLookupData(\$connection);"
    - name: Start PHP built-in web server
      run: |
        php -S localhost:8000 -t . tests/server.php 2>&1 > server.log &
        echo $! > server.pid
        sleep 10
        
        echo "Testing initial API endpoints:"
        curl -v http://localhost:8000/api/v2/general/alive
        echo "\nTesting licenses endpoint:"
        curl -v http://localhost:8000/api/v2/vocabs/licenses/all
        
        echo "\nInitial server log contents:"
        cat server.log
        echo "\nPHP error log:"
        if [ -f /var/log/php_errors.log ]; then
          cat /var/log/php_errors.log
        fi
    - name: Set PHPUnit permissions
      run: chmod +x vendor/bin/phpunit
    # Debug Xdebug installation
    - name: Debug PHP and Xdebug setup
      run: |
        echo "PHP version:"
        php -v
        echo "\nXdebug status:"
        php -m | grep -i xdebug || echo "Xdebug not found"
        echo "\nPHP extensions:"
        php -m
        echo "\nXdebug configuration:"
        php -i | grep -i xdebug || echo "No Xdebug configuration found"
    
    - name: Run PHPUnit tests
      continue-on-error: true
      env:
        API_BASE_URL: http://localhost:8000
      run: |
        echo "PHPUnit version:"
        vendor/bin/phpunit --version
        
        echo "\nPHPUnit configuration check:"
        vendor/bin/phpunit --configuration phpunit.xml --list-tests || echo "Cannot list tests"
        
        echo "\nRunning PHPUnit with coverage:"
        vendor/bin/phpunit --configuration phpunit.xml --coverage-clover clover.xml --debug
        
        echo "\nPHPUnit exit code: $?"
        
        echo "\nChecking for any XML files:"
        find . -name "*.xml" -type f | head -10
        
        echo "\nFinal Server Log:"
        cat server.log
    
    # Debug: Check if coverage file was created
    - name: Debug coverage file
      if: always()
      run: |
        echo "Checking for coverage files..."
        ls -la clover.xml || echo "clover.xml not found"
        if [ -f clover.xml ]; then
          echo "Coverage file size:"
          wc -l clover.xml
          echo "First 20 lines of clover.xml:"
          head -20 clover.xml
        fi
    
    - name: Prepare output directory
      if: github.event_name == 'push'
      run: |
        mkdir -p output
        touch output/.keep
    
    # Generate coverage badge (simplified according to documentation)
    - name: Make code coverage badge
      if: github.event_name == 'push'
      continue-on-error: true
      uses: timkrase/phpunit-coverage-badge@v1.2.1
      with:
        coverage_badge_path: output/coverage.svg
        push_badge: false
    
    # Fallback: Create manual badge only if no clover.xml was generated
    - name: Create fallback badge
      if: github.event_name == 'push'
      run: |
        if [ ! -f clover.xml ]; then
          echo "No coverage data found - this indicates a configuration issue."
          echo "Please check your phpunit.xml for proper <source> configuration."
          if [ ! -f output/coverage.svg ]; then
            echo "Creating fallback coverage badge..."
            mkdir -p output
            cat > output/coverage.svg << 'EOF'
        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="140" height="20" role="img" aria-label="coverage: no-data">
          <title>coverage: no-data</title>
          <linearGradient id="s" x2="0" y2="100%">
            <stop offset="0" stop-color="#bbb" stop-opacity=".1"/>
            <stop offset="1" stop-opacity=".1"/>
          </linearGradient>
          <clipPath id="r">
            <rect width="140" height="20" rx="3" fill="#fff"/>
          </clipPath>
          <g clip-path="url(#r)">
            <rect width="61" height="20" fill="#555"/>
            <rect x="61" width="79" height="20" fill="#e05d44"/>
            <rect width="140" height="20" fill="url(#s)"/>
          </g>
          <g fill="#fff" text-anchor="middle" font-family="Verdana,Geneva,DejaVu Sans,sans-serif" text-rendering="geometricPrecision" font-size="110">
            <text aria-hidden="true" x="315" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="510">coverage</text>
            <text x="315" y="140" transform="scale(.1)" fill="#fff" textLength="510">coverage</text>
            <text aria-hidden="true" x="995" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="690">no-data</text>
            <text x="995" y="140" transform="scale(.1)" fill="#fff" textLength="690">no-data</text>
          </g>
        </svg>
        EOF
            echo "Fallback badge created (indicates configuration issue)"
          fi
        else
          echo "Coverage data found, badge should have been created successfully"
        fi
    
    # Debug: Check if badge was created
    - name: Debug badge creation
      if: github.event_name == 'push'
      run: |
        echo "Checking output directory contents:"
        ls -la output/
        if [ -f output/coverage.svg ]; then
          echo "Coverage badge created successfully!"
          echo "Badge file size:"
          wc -c output/coverage.svg
        else
          echo "Coverage badge NOT created!"
        fi
    
    # Publish badge to image-data branch
    - name: Git push to image-data branch
      if: github.event_name == 'push'
      continue-on-error: true
      uses: peaceiris/actions-gh-pages@v3
      with:
        publish_dir: ./output
        publish_branch: image-data
        github_token: ${{ secrets.GITHUB_TOKEN }}
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        keep_files: false
        force_orphan: true
    
    - name: Stop PHP server
      if: always()
      run: kill $(cat server.pid)