name: Playwright Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  checks: write

jobs:
  playwright-tests:
    runs-on: ubuntu-latest
    env:
      PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: mde2-msl-test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping --silent"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
    - uses: actions/checkout@v4

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, mysqli, zip
        tools: phpdbg

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: |
        composer install --prefer-dist --no-progress --no-suggest
        composer dump-autoload -o
        npm ci

    - name: Wait for MySQL to be ready
      run: |
        for i in {30..0}; do
          if mysqladmin ping -h127.0.0.1 --silent; then
            break
          fi
          echo 'Waiting for MySQL...'
          sleep 5
        done
        if [ "$i" = 0 ]; then
          echo >&2 'MySQL did not start in time.'
          exit 1
        fi

    - name: Grant privileges to test_user
      run: |
        mysql -h127.0.0.1 -uroot -proot_password -e "
          CREATE USER IF NOT EXISTS 'test_user'@'%' IDENTIFIED BY 'test_password';
          GRANT ALL PRIVILEGES ON *.* TO 'test_user'@'%';
          FLUSH PRIVILEGES;
        "

    - name: Set test environment variables
      run: |
        # Override just the database settings for testing
        echo "DB_HOST=127.0.0.1" >> $GITHUB_ENV
        echo "DB_USER=test_user" >> $GITHUB_ENV
        echo "DB_PASSWORD=test_password" >> $GITHUB_ENV
        echo "DB_NAME=mde2-msl-test" >> $GITHUB_ENV

    - name: Initialize database structure and lookup data
      run: php -r "require 'install.php'; createDatabaseStructure(\$connection); insertLookupData(\$connection);"

    - name: Start PHP built-in web server
      run: |
        echo "Starting PHP server without router script..."
        php -S localhost:8000 -t . 2>&1 > server.log &
        echo $! > server.pid
        sleep 10
        
        echo "Listing files in current directory:"
        ls -la | head -20
        
        echo "\nChecking for common entry files:"
        ls -la index.* || echo "No index files found"
        ls -la main.* || echo "No main files found"
        ls -la app.* || echo "No app files found"
        
        echo "\nTesting server connectivity:"
        curl -v http://localhost:8000/ || echo "Root test failed"
        
        echo "\nTesting direct file access:"
        curl -v http://localhost:8000/index.php || echo "index.php test failed"
        
        echo "\nServer log contents:"
        cat server.log
        
        echo "\nTesting if server serves static files:"
        echo "<html><body><h1>Test</h1></body></html>" > test.html
        curl -v http://localhost:8000/test.html || echo "Static file test failed"
        rm test.html

    - name: Cache Playwright browsers
      id: playwright-cache
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright
        key: playwright-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          playwright-${{ runner.os }}-

    - name: Install Playwright Browsers
      env:
        PLAYWRIGHT_BROWSERS_PATH: ~/.cache/ms-playwright
      run: npx playwright install --with-deps ${{ matrix.browser }}

    - name: Verify server is running
      run: |
        echo "Checking if server is running..."
        ps aux | grep php || echo "No PHP processes found"
        
        echo "Testing server connectivity..."
        for i in {1..10}; do
          if curl -s http://localhost:8000/index.php > /dev/null; then
            echo "Server is responding to index.php on attempt $i"
            break
          elif curl -s http://localhost:8000/ > /dev/null; then
            echo "Server is responding to root on attempt $i"
            break
          else
            echo "Server not responding on attempt $i, waiting..."
            sleep 2
          fi
        done
        
        echo "Final connectivity test:"
        curl -v http://localhost:8000/index.php || echo "index.php still not reachable"
        curl -v http://localhost:8000/ || echo "Root still not reachable"

    - name: Create debugging test
      run: |
        cat << 'EOF' > tests/playwright/debug.spec.js
        import { test, expect } from '@playwright/test';
        
        test('Debug server response', async ({ page }) => {
          console.log('Testing direct server access...');
          
          // Test different URLs
          const urls = ['/', '/index.php', '/index.html'];
          
          for (const url of urls) {
            try {
              console.log(`\nTrying URL: ${url}`);
              const response = await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 5000 });
              console.log(`Status: ${response.status()}`);
              console.log(`URL after navigation: ${page.url()}`);
              
              const title = await page.title();
              console.log(`Page title: ${title}`);
              
              const bodyText = await page.locator('body').textContent().catch(() => 'No body found');
              console.log(`Body text (first 100 chars): ${bodyText.substring(0, 100)}`);
              
              if (response.ok()) {
                console.log(`✅ Success with ${url}`);
                break;
              }
            } catch (error) {
              console.log(`❌ Error with ${url}: ${error.message}`);
            }
          }
        });
        EOF

    - name: Run Playwright tests
      id: run_playwright_tests
      run: npx playwright test --config=playwright.config.ci.ts --workers=2 --project=${{ matrix.browser }}
      env:
        CI: true

    - name: Publish ELMO performance metrics
      id: publish_performance_metrics
      if: always()
      env:
        PLAYWRIGHT_PROJECT: ${{ matrix.browser }}
      run: |
        node <<'NODE'
        const fs = require('fs');
        const path = require('path');

        const project = process.env.PLAYWRIGHT_PROJECT || 'unknown';
        const sanitized = project.toLowerCase().replace(/[^a-z0-9]+/g, '-');
        const metricsDir = path.join(process.cwd(), 'test-results', 'performance');
        const candidatePaths = [
          path.join(metricsDir, `${sanitized}.json`),
          path.join(metricsDir, `${project}.json`),
        ];

        const metricsPath = candidatePaths.find((candidate) => fs.existsSync(candidate));

        if (!metricsPath) {
          console.log(`::warning::Performance metrics not found for ${project}.`);
          console.log(`Checked: ${candidatePaths.join(', ')}`);

          const outputsFile = process.env.GITHUB_OUTPUT;
          if (outputsFile) {
            fs.appendFileSync(outputsFile, 'load_time=n/a\n');
            fs.appendFileSync(outputsFile, 'navigation_duration=n/a\n');
            fs.appendFileSync(outputsFile, 'dom_content_loaded=n/a\n');
          }

          process.exit(0);
        }

        const metrics = JSON.parse(fs.readFileSync(metricsPath, 'utf8'));

        const toNumber = (value) => (typeof value === 'number' && Number.isFinite(value) ? value : undefined);
        const average = (values) => {
          const valid = values.filter((value) => typeof value === 'number' && Number.isFinite(value));
          if (valid.length === 0) {
            return undefined;
          }
          return valid.reduce((sum, value) => sum + value, 0) / valid.length;
        };

        const runs = Array.isArray(metrics.runs) ? metrics.runs : [];
        const runLoadTimes = runs
          .map((run) => (run && typeof run === 'object' ? toNumber(run.totalLoadTimeMs) : undefined))
          .filter((value) => value !== undefined);
        const runNavigationDurations = runs
          .map((run) => {
            const navigation = run && typeof run === 'object' ? run.navigation : undefined;
            return navigation && typeof navigation === 'object' ? toNumber(navigation.duration) : undefined;
          })
          .filter((value) => value !== undefined);
        const runDomContentLoaded = runs
          .map((run) => {
            const navigation = run && typeof run === 'object' ? run.navigation : undefined;
            return navigation && typeof navigation === 'object' ? toNumber(navigation.domContentLoadedEventEnd) : undefined;
          })
          .filter((value) => value !== undefined);

        const navigation = metrics.navigation && typeof metrics.navigation === 'object' ? metrics.navigation : undefined;

        const loadTime =
          toNumber(metrics.totalLoadTimeMs ?? metrics.averageLoadTimeMs) ?? average(runLoadTimes);
        const navigationDuration =
          (navigation && toNumber(navigation.duration)) ?? average(runNavigationDurations);
        const domContentLoaded =
          (navigation && toNumber(navigation.domContentLoadedEventEnd)) ?? average(runDomContentLoaded);

        const formattedLoad = loadTime !== undefined ? loadTime.toFixed(0) : 'n/a';
        const formattedDuration = navigationDuration !== undefined ? navigationDuration.toFixed(0) : 'n/a';
        const formattedDom = domContentLoaded !== undefined ? domContentLoaded.toFixed(0) : 'n/a';

        const messageParts = [`${project} ELMO fully loaded in ${formattedLoad} ms`];
        if (formattedDuration !== 'n/a') {
          messageParts.push(`navigation duration ${formattedDuration} ms`);
        }
        if (formattedDom !== 'n/a') {
          messageParts.push(`DOMContentLoaded ${formattedDom} ms`);
        }
        if (runLoadTimes.length > 0) {
          const formattedRuns = runLoadTimes
            .map((value, index) => `run ${index + 1}: ${value.toFixed(0)} ms`)
            .join(', ');
          messageParts.push(`runs ${formattedRuns}`);
        }

        console.log(`::notice title=ELMO load time::${messageParts.join(' | ')}`);

        const outputsFile = process.env.GITHUB_OUTPUT;
        const runsSummary = runLoadTimes.length > 0
          ? runLoadTimes.map((value, index) => `#${index + 1}: ${value.toFixed(0)} ms`).join(', ')
          : '';

        if (outputsFile) {
          fs.appendFileSync(outputsFile, `load_time=${formattedLoad}\n`);
          fs.appendFileSync(outputsFile, `navigation_duration=${formattedDuration}\n`);
          fs.appendFileSync(outputsFile, `dom_content_loaded=${formattedDom}\n`);
          if (runsSummary) {
            fs.appendFileSync(outputsFile, `runs_summary=${runsSummary}\n`);
          }
        }

        const summaryPath = process.env.GITHUB_STEP_SUMMARY;
        if (summaryPath) {
          let summary = '';
          if (!fs.existsSync(summaryPath) || fs.statSync(summaryPath).size === 0) {
            summary += '| Browser | Fully loaded (ms) | Navigation duration (ms) | DOMContentLoaded (ms) |\n';
            summary += '| --- | ---: | ---: | ---: |\n';
          }
          summary += `| ${metrics.browser || project} | ${formattedLoad} | ${formattedDuration} | ${formattedDom} |\n`;
          if (runLoadTimes.length > 0) {
            const runDetails = runLoadTimes
              .map((value, index) => `#${index + 1}: ${value.toFixed(0)} ms`)
              .join(', ');
            summary += `> Individual runs (${runLoadTimes.length}): ${runDetails}\n`;
          }
          fs.appendFileSync(summaryPath, summary);
        }
        NODE

    - name: Report ELMO load time check run
      if: always()
      uses: actions/github-script@v7
      env:
        PLAYWRIGHT_PROJECT: ${{ matrix.browser }}
        LOAD_TIME_MS: ${{ steps.publish_performance_metrics.outputs.load_time }}
        NAVIGATION_DURATION_MS: ${{ steps.publish_performance_metrics.outputs.navigation_duration }}
        DOM_CONTENT_LOADED_MS: ${{ steps.publish_performance_metrics.outputs.dom_content_loaded }}
        RUNS_SUMMARY: ${{ steps.publish_performance_metrics.outputs.runs_summary }}
        PLAYWRIGHT_CONCLUSION: ${{ steps.run_playwright_tests.conclusion }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const project = process.env.PLAYWRIGHT_PROJECT || 'unknown';
          const loadTime = process.env.LOAD_TIME_MS;
          const navigationDuration = process.env.NAVIGATION_DURATION_MS;
          const domContentLoaded = process.env.DOM_CONTENT_LOADED_MS;
          const runsSummary = process.env.RUNS_SUMMARY || '';
          const testConclusion = (process.env.PLAYWRIGHT_CONCLUSION || '').toLowerCase();

          if (!loadTime) {
            core.info(`No load time available for ${project}. Skipping check run.`);
            return;
          }

          const conclusionMap = {
            success: 'success',
            failure: 'failure',
            cancelled: 'cancelled',
            skipped: 'skipped',
            timed_out: 'timed_out',
            action_required: 'action_required',
          };

          const conclusion = conclusionMap[testConclusion] || (loadTime === 'n/a' ? 'neutral' : 'success');

          const owner = context.repo.owner;
          const repo = context.repo.repo;
          const headSha = context.sha;
          const now = new Date().toISOString();

          const metricsLines = [
            `• Fully loaded: ${loadTime} ms`,
          ];
          if (navigationDuration && navigationDuration !== 'n/a') {
            metricsLines.push(`• Navigation duration: ${navigationDuration} ms`);
          }
          if (domContentLoaded && domContentLoaded !== 'n/a') {
            metricsLines.push(`• DOMContentLoaded: ${domContentLoaded} ms`);
          }
          if (runsSummary) {
            metricsLines.push(`• Runs: ${runsSummary}`);
          }

          await github.rest.checks.create({
            owner,
            repo,
            name: `playwright-tests (${project}) load time`,
            head_sha: headSha,
            status: 'completed',
            started_at: now,
            completed_at: now,
            conclusion,
            output: {
              title: `ELMO fully loaded in ${loadTime} ms`,
              summary: metricsLines.join('\n'),
            },
            details_url: `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`,
          });

    - name: Debug what the browser actually sees
      if: failure()
      run: |
        echo "=== Debugging what the browser gets ==="
        curl -s http://localhost:8000/ | head -50
        echo "\n=== Testing if any HTML is returned ==="
        curl -s http://localhost:8000/ | grep -i "html\|body\|navbar" || echo "No HTML tags found"

    - name: Debug what the browser actually sees
      if: failure()
      run: |
        echo "=== Debugging what the browser gets ==="
        curl -s http://localhost:8000/ | head -50
        echo "\n=== Testing if any HTML is returned ==="
        curl -s http://localhost:8000/ | grep -i "html\|body\|navbar" || echo "No HTML tags found"

    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.browser }}
        path: playwright-report/
        retention-days: 30

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.browser }}
        path: test-results/
        retention-days: 30

    - name: Display server logs on failure
      if: failure()
      run: |
        echo "=== Server Log ==="
        cat server.log
        echo "=== PHP Error Log ==="
        if [ -f /var/log/php_errors.log ]; then
          cat /var/log/php_errors.log
        fi

    - name: Stop PHP server
      if: always()
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
        fi