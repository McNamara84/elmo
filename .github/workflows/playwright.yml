name: Playwright Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  playwright-tests:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: mde2-msl-test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping --silent"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
    - uses: actions/checkout@v4

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, mysqli, zip
        tools: phpdbg

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: |
        composer install --prefer-dist --no-progress --no-suggest
        composer dump-autoload -o
        npm install

    - name: Wait for MySQL to be ready
      run: |
        for i in {30..0}; do
          if mysqladmin ping -h127.0.0.1 --silent; then
            break
          fi
          echo 'Waiting for MySQL...'
          sleep 5
        done
        if [ "$i" = 0 ]; then
          echo >&2 'MySQL did not start in time.'
          exit 1
        fi

    - name: Grant privileges to test_user
      run: |
        mysql -h127.0.0.1 -uroot -proot_password -e "
          CREATE USER IF NOT EXISTS 'test_user'@'%' IDENTIFIED BY 'test_password';
          GRANT ALL PRIVILEGES ON *.* TO 'test_user'@'%';
          FLUSH PRIVILEGES;
        "

    - name: Set test environment variables
      run: |
        # Override just the database settings for testing
        echo "DB_HOST=127.0.0.1" >> $GITHUB_ENV
        echo "DB_USER=test_user" >> $GITHUB_ENV
        echo "DB_PASSWORD=test_password" >> $GITHUB_ENV
        echo "DB_NAME=mde2-msl-test" >> $GITHUB_ENV

    - name: Initialize database structure and lookup data
      run: php -r "require 'install.php'; createDatabaseStructure(\$connection); insertLookupData(\$connection);"

    - name: Start PHP built-in web server
      run: |
        echo "Starting PHP server without router script..."
        php -S localhost:8000 -t . 2>&1 > server.log &
        echo $! > server.pid
        sleep 10
        
        echo "Listing files in current directory:"
        ls -la | head -20
        
        echo "\nChecking for common entry files:"
        ls -la index.* || echo "No index files found"
        ls -la main.* || echo "No main files found"
        ls -la app.* || echo "No app files found"
        
        echo "\nTesting server connectivity:"
        curl -v http://localhost:8000/ || echo "Root test failed"
        
        echo "\nTesting direct file access:"
        curl -v http://localhost:8000/index.php || echo "index.php test failed"
        
        echo "\nServer log contents:"
        cat server.log
        
        echo "\nTesting if server serves static files:"
        echo "<html><body><h1>Test</h1></body></html>" > test.html
        curl -v http://localhost:8000/test.html || echo "Static file test failed"
        rm test.html

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Verify server is running
      run: |
        echo "Checking if server is running..."
        ps aux | grep php || echo "No PHP processes found"
        
        echo "Testing server connectivity..."
        for i in {1..10}; do
          if curl -s http://localhost:8000/index.php > /dev/null; then
            echo "Server is responding to index.php on attempt $i"
            break
          elif curl -s http://localhost:8000/ > /dev/null; then
            echo "Server is responding to root on attempt $i"
            break
          else
            echo "Server not responding on attempt $i, waiting..."
            sleep 2
          fi
        done
        
        echo "Final connectivity test:"
        curl -v http://localhost:8000/index.php || echo "index.php still not reachable"
        curl -v http://localhost:8000/ || echo "Root still not reachable"

    - name: Create debugging test
      run: |
        cat << 'EOF' > tests/playwright/debug.spec.js
        import { test, expect } from '@playwright/test';
        
        test('Debug server response', async ({ page }) => {
          console.log('Testing direct server access...');
          
          // Test different URLs
          const urls = ['/', '/index.php', '/index.html'];
          
          for (const url of urls) {
            try {
              console.log(`\nTrying URL: ${url}`);
              const response = await page.goto(url, { waitUntil: 'domcontentloaded', timeout: 5000 });
              console.log(`Status: ${response.status()}`);
              console.log(`URL after navigation: ${page.url()}`);
              
              const title = await page.title();
              console.log(`Page title: ${title}`);
              
              const bodyText = await page.locator('body').textContent().catch(() => 'No body found');
              console.log(`Body text (first 100 chars): ${bodyText.substring(0, 100)}`);
              
              if (response.ok()) {
                console.log(`✅ Success with ${url}`);
                break;
              }
            } catch (error) {
              console.log(`❌ Error with ${url}: ${error.message}`);
            }
          }
        });
        EOF

    - name: Run Playwright tests
      run: npx playwright test --config=playwright.config.ci.ts
      env:
        CI: true

    - name: Debug what the browser actually sees
      if: failure()
      run: |
        echo "=== Debugging what the browser gets ==="
        curl -s http://localhost:8000/ | head -50
        echo "\n=== Testing if any HTML is returned ==="
        curl -s http://localhost:8000/ | grep -i "html\|body\|navbar" || echo "No HTML tags found"

    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: test-results/
        retention-days: 30

    - name: Display server logs on failure
      if: failure()
      run: |
        echo "=== Server Log ==="
        cat server.log
        echo "=== PHP Error Log ==="
        if [ -f /var/log/php_errors.log ]; then
          cat /var/log/php_errors.log
        fi

    - name: Stop PHP server
      if: always()
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
        fi